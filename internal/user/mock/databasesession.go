// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	entity "user-microservice/internal/database/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockdatabaseSession is an autogenerated mock type for the databaseSession type
type MockdatabaseSession struct {
	mock.Mock
}

type MockdatabaseSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdatabaseSession) EXPECT() *MockdatabaseSession_Expecter {
	return &MockdatabaseSession_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockdatabaseSession) CreateUser(_a0 entity.User) (entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.User) entity.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatabaseSession_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockdatabaseSession_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 entity.User
func (_e *MockdatabaseSession_Expecter) CreateUser(_a0 interface{}) *MockdatabaseSession_CreateUser_Call {
	return &MockdatabaseSession_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockdatabaseSession_CreateUser_Call) Run(run func(_a0 entity.User)) *MockdatabaseSession_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.User))
	})
	return _c
}

func (_c *MockdatabaseSession_CreateUser_Call) Return(_a0 entity.User, _a1 error) *MockdatabaseSession_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatabaseSession_CreateUser_Call) RunAndReturn(run func(entity.User) (entity.User, error)) *MockdatabaseSession_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *MockdatabaseSession) DeleteUser(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdatabaseSession_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockdatabaseSession_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 int
func (_e *MockdatabaseSession_Expecter) DeleteUser(_a0 interface{}) *MockdatabaseSession_DeleteUser_Call {
	return &MockdatabaseSession_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0)}
}

func (_c *MockdatabaseSession_DeleteUser_Call) Run(run func(_a0 int)) *MockdatabaseSession_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockdatabaseSession_DeleteUser_Call) Return(_a0 error) *MockdatabaseSession_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdatabaseSession_DeleteUser_Call) RunAndReturn(run func(int) error) *MockdatabaseSession_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUser provides a mock function with given fields: _a0
func (_m *MockdatabaseSession) FetchUser(_a0 int) (entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FetchUser")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) entity.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatabaseSession_FetchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUser'
type MockdatabaseSession_FetchUser_Call struct {
	*mock.Call
}

// FetchUser is a helper method to define mock.On call
//   - _a0 int
func (_e *MockdatabaseSession_Expecter) FetchUser(_a0 interface{}) *MockdatabaseSession_FetchUser_Call {
	return &MockdatabaseSession_FetchUser_Call{Call: _e.mock.On("FetchUser", _a0)}
}

func (_c *MockdatabaseSession_FetchUser_Call) Run(run func(_a0 int)) *MockdatabaseSession_FetchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockdatabaseSession_FetchUser_Call) Return(_a0 entity.User, _a1 error) *MockdatabaseSession_FetchUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatabaseSession_FetchUser_Call) RunAndReturn(run func(int) (entity.User, error)) *MockdatabaseSession_FetchUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields:
func (_m *MockdatabaseSession) ListUsers() ([]entity.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatabaseSession_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockdatabaseSession_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
func (_e *MockdatabaseSession_Expecter) ListUsers() *MockdatabaseSession_ListUsers_Call {
	return &MockdatabaseSession_ListUsers_Call{Call: _e.mock.On("ListUsers")}
}

func (_c *MockdatabaseSession_ListUsers_Call) Run(run func()) *MockdatabaseSession_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdatabaseSession_ListUsers_Call) Return(_a0 []entity.User, _a1 error) *MockdatabaseSession_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatabaseSession_ListUsers_Call) RunAndReturn(run func() ([]entity.User, error)) *MockdatabaseSession_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *MockdatabaseSession) UpdateUser(_a0 int, _a1 entity.User) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, entity.User) (entity.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, entity.User) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(int, entity.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatabaseSession_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockdatabaseSession_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 int
//   - _a1 entity.User
func (_e *MockdatabaseSession_Expecter) UpdateUser(_a0 interface{}, _a1 interface{}) *MockdatabaseSession_UpdateUser_Call {
	return &MockdatabaseSession_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0, _a1)}
}

func (_c *MockdatabaseSession_UpdateUser_Call) Run(run func(_a0 int, _a1 entity.User)) *MockdatabaseSession_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(entity.User))
	})
	return _c
}

func (_c *MockdatabaseSession_UpdateUser_Call) Return(_a0 entity.User, _a1 error) *MockdatabaseSession_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatabaseSession_UpdateUser_Call) RunAndReturn(run func(int, entity.User) (entity.User, error)) *MockdatabaseSession_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdatabaseSession creates a new instance of MockdatabaseSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdatabaseSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdatabaseSession {
	mock := &MockdatabaseSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
