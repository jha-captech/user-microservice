// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	models "github.com/jha-captech/user-microservice/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MocklistUserServicer is an autogenerated mock type for the listUserServicer type
type MocklistUserServicer struct {
	mock.Mock
}

type MocklistUserServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MocklistUserServicer) EXPECT() *MocklistUserServicer_Expecter {
	return &MocklistUserServicer_Expecter{mock: &_m.Mock}
}

// ListUsers provides a mock function with given fields:
func (_m *MocklistUserServicer) ListUsers() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocklistUserServicer_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MocklistUserServicer_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
func (_e *MocklistUserServicer_Expecter) ListUsers() *MocklistUserServicer_ListUsers_Call {
	return &MocklistUserServicer_ListUsers_Call{Call: _e.mock.On("ListUsers")}
}

func (_c *MocklistUserServicer_ListUsers_Call) Run(run func()) *MocklistUserServicer_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocklistUserServicer_ListUsers_Call) Return(_a0 []models.User, _a1 error) *MocklistUserServicer_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocklistUserServicer_ListUsers_Call) RunAndReturn(run func() ([]models.User, error)) *MocklistUserServicer_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocklistUserServicer creates a new instance of MocklistUserServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocklistUserServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocklistUserServicer {
	mock := &MocklistUserServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
