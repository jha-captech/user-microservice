// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	models "github.com/jha-captech/user-microservice/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockupdateUserServicer is an autogenerated mock type for the updateUserServicer type
type MockupdateUserServicer struct {
	mock.Mock
}

type MockupdateUserServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockupdateUserServicer) EXPECT() *MockupdateUserServicer_Expecter {
	return &MockupdateUserServicer_Expecter{mock: &_m.Mock}
}

// UpdateUser provides a mock function with given fields: ID, user
func (_m *MockupdateUserServicer) UpdateUser(ID int, user models.User) (models.User, error) {
	ret := _m.Called(ID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.User) (models.User, error)); ok {
		return rf(ID, user)
	}
	if rf, ok := ret.Get(0).(func(int, models.User) models.User); ok {
		r0 = rf(ID, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(int, models.User) error); ok {
		r1 = rf(ID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockupdateUserServicer_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockupdateUserServicer_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ID int
//   - user models.User
func (_e *MockupdateUserServicer_Expecter) UpdateUser(ID interface{}, user interface{}) *MockupdateUserServicer_UpdateUser_Call {
	return &MockupdateUserServicer_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ID, user)}
}

func (_c *MockupdateUserServicer_UpdateUser_Call) Run(run func(ID int, user models.User)) *MockupdateUserServicer_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(models.User))
	})
	return _c
}

func (_c *MockupdateUserServicer_UpdateUser_Call) Return(_a0 models.User, _a1 error) *MockupdateUserServicer_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockupdateUserServicer_UpdateUser_Call) RunAndReturn(run func(int, models.User) (models.User, error)) *MockupdateUserServicer_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockupdateUserServicer creates a new instance of MockupdateUserServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockupdateUserServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockupdateUserServicer {
	mock := &MockupdateUserServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
